{"version":3,"sources":["components/ToDoForm.js","components/Todo.js","components/ToDoList.js","components/Date.js","components/Clear.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","type","name","value","onChange","target","Button","ListItem","styled","div","CheckboxDiv","StyledUl","removeButton","Todo","toggleComplete","removeTodo","style","display","Checkbox","checked","onClick","variant","textDecoration","IconButton","StyledDiv","ToDoList","todos","List","map","key","Styled","p","Date","moment","format","button","Clear","setTodos","Styledh1","h1","StyledDiv2","StyledDiv3","App","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.faa62f1c.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nfunction ToDoForm({ addTodo }) {\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false\r\n    });\r\n\r\n    function handleTaskInputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (todo.task.trim()) {\r\n            addTodo({ ...todo, id: uuidv4() });\r\n            setTodo({ ...todo, task: \"\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n                <TextField\r\n                    type=\"text\"\r\n                    name=\"task\"\r\n                    value={todo.task}\r\n                    onChange={handleTaskInputChange}\r\n                />\r\n                <Button type=\"submit\">+</Button>\r\n            </form>\r\n    );\r\n}\r\n\r\nexport default ToDoForm;","import { Checkbox, IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ListItem = styled.div`\r\n  font-size: xx-large;\r\n  margin-right: 10%;\r\n`;\r\nconst CheckboxDiv = styled.div`\r\n  margin-left: 30%;\r\n  margin-right: 10%;\r\n  font-size: xx-large;\r\n`;\r\n\r\nconst StyledUl = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst removeButton = styled.div`\r\n  text-align: right;\r\n`;\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id);\r\n    }\r\n\r\n    return (\r\n        <StyledUl style={{ display: \"flex\" }}>\r\n            <CheckboxDiv>\r\n                <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n            </CheckboxDiv>\r\n            <ListItem\r\n                variant=\"body1\"\r\n                style={{\r\n                    textDecoration: todo.completed ? \"line-through\" : null\r\n                }}\r\n            >\r\n                {todo.task}\r\n            </ListItem>\r\n                <IconButton className={removeButton} onClick={handleRemoveClick}>\r\n                        <CloseIcon />\r\n                </IconButton>\r\n        </StyledUl>\r\n    );\r\n}\r\n\r\nexport default Todo;","import { List } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst StyledDiv = styled.div`\r\n  margin-top: 3%;\r\n`;\r\n\r\nfunction ToDoList({ todos, removeTodo, toggleComplete }) {\r\n    return (\r\n        <StyledDiv>\r\n            <List>\r\n                {todos.map(todo => (\r\n                    <Todo\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                        removeTodo={removeTodo}\r\n                        toggleComplete={toggleComplete}\r\n                    />\r\n                ))}\r\n            </List>\r\n        </StyledDiv>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Styled = styled.p`\r\n  color: white;\r\n  opacity: 60%;\r\n`;\r\n\r\nfunction Date(){\r\n\r\nreturn(\r\n    <Styled>{moment().format(\"DD-MM-YYYY\")}</Styled>\r\n)\r\n}\r\n\r\nexport default Date;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Styled = styled.button`\r\n  color: white;\r\n  background-color: gray;\r\n  width: 10%;\r\n  padding-top: 1%;\r\n  padding-bottom: 1%;\r\n`;\r\n\r\nfunction Clear({setTodos}){\r\n\r\n    function ClearAll(){\r\n        setTodos([]);\r\n    }\r\n    return(\r\n        <Styled onClick={ClearAll} type=\"button\">Clear All</Styled>\r\n    )\r\n}\r\n\r\nexport default Clear;","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport styled from \"@emotion/styled\";\r\nimport ToDoForm from \"./components/ToDoForm\";\r\nimport ToDoList from \"./components/ToDoList\";\r\nimport Date from \"./components/Date\";\r\nimport Clear from \"./components/Clear\"\r\n\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nconst Styledh1 = styled.h1`\r\n  color: white;\r\n`;\r\nconst StyledDiv = styled.div`\r\n  background-color: #323633;\r\n  color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 50px 1px darkgray;\r\n  margin: 2% 12%;\r\n  padding: 0.5%;\r\n  text-align: center;\r\n  height: 500px;\r\n`;\r\n\r\nconst StyledDiv2 = styled.div`\r\n  background-color: #323633;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 50px 5px darkgray;\r\n  margin: 2% 8%;\r\n  padding: 0.5%;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledDiv3 = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nfunction App() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n        if (storageTodos) {\r\n            setTodos(storageTodos);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    function addTodo(todo) {\r\n        setTodos([todo, ...todos]);\r\n    }\r\n\r\n    function toggleComplete(id) {\r\n        setTodos(\r\n            todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    };\r\n                }\r\n                return todo;\r\n            })\r\n        );\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        setTodos(todos.filter(todo => todo.id !== id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <StyledDiv2>\r\n                <Styledh1>\r\n                    To Do List\r\n                </Styledh1>\r\n                <Date/>\r\n            </StyledDiv2>\r\n            <StyledDiv3>\r\n                <Clear setTodos={setTodos}/>\r\n            </StyledDiv3>\r\n            <StyledDiv>\r\n                <ToDoForm addTodo={addTodo} />\r\n                <ToDoList\r\n                    todos={todos}\r\n                    removeTodo={removeTodo}\r\n                    toggleComplete={toggleComplete}\r\n                />\r\n            </StyledDiv>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}